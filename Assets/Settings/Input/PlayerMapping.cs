//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Settings/Input/PlayerMapping.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerMapping: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerMapping()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerMapping"",
    ""maps"": [
        {
            ""name"": ""TopDownPilot"",
            ""id"": ""76d52ed5-ae44-40f3-85a1-e20c31fd7b2c"",
            ""actions"": [
                {
                    ""name"": ""YAxis"",
                    ""type"": ""Button"",
                    ""id"": ""80c87df6-062f-4769-86a5-661e278111bf"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""XAxis"",
                    ""type"": ""Button"",
                    ""id"": ""78c98334-14e1-47e9-8d0a-f27c5f2a1f16"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""WeaponSwitch"",
                    ""type"": ""Button"",
                    ""id"": ""d957e434-4d4e-45b2-973d-eac0422f7c79"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Use_Weapon"",
                    ""type"": ""Button"",
                    ""id"": ""eccf49ce-e660-421d-b893-9c8252799b9a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""QuickStep"",
                    ""type"": ""Button"",
                    ""id"": ""a0b8b9b1-d528-4c62-9cde-db62e6ee558e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Dash"",
                    ""type"": ""Button"",
                    ""id"": ""70a47a42-8cfe-472e-88ba-a69a1380a0a7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""Keys"",
                    ""id"": ""7d8b0f8e-c2aa-4042-ab69-0de92fc58180"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""YAxis"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""a6314cc2-e657-4567-b35e-f73ac4d74504"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""YAxis"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""027ed390-617e-48a0-9b87-196396d6cebe"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""YAxis"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Keys"",
                    ""id"": ""dc2c7429-b4e1-4f53-abd9-e41e6e7dea0a"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""XAxis"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""4a396b44-6f46-40d9-8896-8d88d1a0ab37"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""XAxis"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""b56f7c8e-ee72-45a6-8939-fa1d220306fe"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""XAxis"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""708291f8-9e6e-4533-a459-c214f0476097"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""WeaponSwitch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2a5edd88-acf5-4250-a7c6-285d2f3d820f"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""WeaponSwitch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""703f7ac7-6084-4be0-ae28-05b9f1c7730a"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Use_Weapon"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ebde296a-ee6a-4d2a-aa93-27fc9cb3643d"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""QuickStep"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8aac4c87-14ad-420e-b529-e14700acc73f"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": ""Hold"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Dash"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""SideOnPilot"",
            ""id"": ""517f23e4-f6cd-4836-b7de-990e0a585dff"",
            ""actions"": [
                {
                    ""name"": ""New action"",
                    ""type"": ""Button"",
                    ""id"": ""d7c019d7-1e80-445a-a716-9b8421b80d11"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""47947c3a-9244-46b0-aee7-dc73928e59a3"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Menu"",
            ""id"": ""769030b1-02c8-440d-8721-e405324e0b6f"",
            ""actions"": [
                {
                    ""name"": ""New action"",
                    ""type"": ""Button"",
                    ""id"": ""cddc2d34-2219-4171-a4c9-54e0a9ea689b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""cdbe29c9-0c2a-4314-9752-928807620d45"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // TopDownPilot
        m_TopDownPilot = asset.FindActionMap("TopDownPilot", throwIfNotFound: true);
        m_TopDownPilot_YAxis = m_TopDownPilot.FindAction("YAxis", throwIfNotFound: true);
        m_TopDownPilot_XAxis = m_TopDownPilot.FindAction("XAxis", throwIfNotFound: true);
        m_TopDownPilot_WeaponSwitch = m_TopDownPilot.FindAction("WeaponSwitch", throwIfNotFound: true);
        m_TopDownPilot_Use_Weapon = m_TopDownPilot.FindAction("Use_Weapon", throwIfNotFound: true);
        m_TopDownPilot_QuickStep = m_TopDownPilot.FindAction("QuickStep", throwIfNotFound: true);
        m_TopDownPilot_Dash = m_TopDownPilot.FindAction("Dash", throwIfNotFound: true);
        // SideOnPilot
        m_SideOnPilot = asset.FindActionMap("SideOnPilot", throwIfNotFound: true);
        m_SideOnPilot_Newaction = m_SideOnPilot.FindAction("New action", throwIfNotFound: true);
        // Menu
        m_Menu = asset.FindActionMap("Menu", throwIfNotFound: true);
        m_Menu_Newaction = m_Menu.FindAction("New action", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // TopDownPilot
    private readonly InputActionMap m_TopDownPilot;
    private List<ITopDownPilotActions> m_TopDownPilotActionsCallbackInterfaces = new List<ITopDownPilotActions>();
    private readonly InputAction m_TopDownPilot_YAxis;
    private readonly InputAction m_TopDownPilot_XAxis;
    private readonly InputAction m_TopDownPilot_WeaponSwitch;
    private readonly InputAction m_TopDownPilot_Use_Weapon;
    private readonly InputAction m_TopDownPilot_QuickStep;
    private readonly InputAction m_TopDownPilot_Dash;
    public struct TopDownPilotActions
    {
        private @PlayerMapping m_Wrapper;
        public TopDownPilotActions(@PlayerMapping wrapper) { m_Wrapper = wrapper; }
        public InputAction @YAxis => m_Wrapper.m_TopDownPilot_YAxis;
        public InputAction @XAxis => m_Wrapper.m_TopDownPilot_XAxis;
        public InputAction @WeaponSwitch => m_Wrapper.m_TopDownPilot_WeaponSwitch;
        public InputAction @Use_Weapon => m_Wrapper.m_TopDownPilot_Use_Weapon;
        public InputAction @QuickStep => m_Wrapper.m_TopDownPilot_QuickStep;
        public InputAction @Dash => m_Wrapper.m_TopDownPilot_Dash;
        public InputActionMap Get() { return m_Wrapper.m_TopDownPilot; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TopDownPilotActions set) { return set.Get(); }
        public void AddCallbacks(ITopDownPilotActions instance)
        {
            if (instance == null || m_Wrapper.m_TopDownPilotActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_TopDownPilotActionsCallbackInterfaces.Add(instance);
            @YAxis.started += instance.OnYAxis;
            @YAxis.performed += instance.OnYAxis;
            @YAxis.canceled += instance.OnYAxis;
            @XAxis.started += instance.OnXAxis;
            @XAxis.performed += instance.OnXAxis;
            @XAxis.canceled += instance.OnXAxis;
            @WeaponSwitch.started += instance.OnWeaponSwitch;
            @WeaponSwitch.performed += instance.OnWeaponSwitch;
            @WeaponSwitch.canceled += instance.OnWeaponSwitch;
            @Use_Weapon.started += instance.OnUse_Weapon;
            @Use_Weapon.performed += instance.OnUse_Weapon;
            @Use_Weapon.canceled += instance.OnUse_Weapon;
            @QuickStep.started += instance.OnQuickStep;
            @QuickStep.performed += instance.OnQuickStep;
            @QuickStep.canceled += instance.OnQuickStep;
            @Dash.started += instance.OnDash;
            @Dash.performed += instance.OnDash;
            @Dash.canceled += instance.OnDash;
        }

        private void UnregisterCallbacks(ITopDownPilotActions instance)
        {
            @YAxis.started -= instance.OnYAxis;
            @YAxis.performed -= instance.OnYAxis;
            @YAxis.canceled -= instance.OnYAxis;
            @XAxis.started -= instance.OnXAxis;
            @XAxis.performed -= instance.OnXAxis;
            @XAxis.canceled -= instance.OnXAxis;
            @WeaponSwitch.started -= instance.OnWeaponSwitch;
            @WeaponSwitch.performed -= instance.OnWeaponSwitch;
            @WeaponSwitch.canceled -= instance.OnWeaponSwitch;
            @Use_Weapon.started -= instance.OnUse_Weapon;
            @Use_Weapon.performed -= instance.OnUse_Weapon;
            @Use_Weapon.canceled -= instance.OnUse_Weapon;
            @QuickStep.started -= instance.OnQuickStep;
            @QuickStep.performed -= instance.OnQuickStep;
            @QuickStep.canceled -= instance.OnQuickStep;
            @Dash.started -= instance.OnDash;
            @Dash.performed -= instance.OnDash;
            @Dash.canceled -= instance.OnDash;
        }

        public void RemoveCallbacks(ITopDownPilotActions instance)
        {
            if (m_Wrapper.m_TopDownPilotActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ITopDownPilotActions instance)
        {
            foreach (var item in m_Wrapper.m_TopDownPilotActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_TopDownPilotActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public TopDownPilotActions @TopDownPilot => new TopDownPilotActions(this);

    // SideOnPilot
    private readonly InputActionMap m_SideOnPilot;
    private List<ISideOnPilotActions> m_SideOnPilotActionsCallbackInterfaces = new List<ISideOnPilotActions>();
    private readonly InputAction m_SideOnPilot_Newaction;
    public struct SideOnPilotActions
    {
        private @PlayerMapping m_Wrapper;
        public SideOnPilotActions(@PlayerMapping wrapper) { m_Wrapper = wrapper; }
        public InputAction @Newaction => m_Wrapper.m_SideOnPilot_Newaction;
        public InputActionMap Get() { return m_Wrapper.m_SideOnPilot; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(SideOnPilotActions set) { return set.Get(); }
        public void AddCallbacks(ISideOnPilotActions instance)
        {
            if (instance == null || m_Wrapper.m_SideOnPilotActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_SideOnPilotActionsCallbackInterfaces.Add(instance);
            @Newaction.started += instance.OnNewaction;
            @Newaction.performed += instance.OnNewaction;
            @Newaction.canceled += instance.OnNewaction;
        }

        private void UnregisterCallbacks(ISideOnPilotActions instance)
        {
            @Newaction.started -= instance.OnNewaction;
            @Newaction.performed -= instance.OnNewaction;
            @Newaction.canceled -= instance.OnNewaction;
        }

        public void RemoveCallbacks(ISideOnPilotActions instance)
        {
            if (m_Wrapper.m_SideOnPilotActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ISideOnPilotActions instance)
        {
            foreach (var item in m_Wrapper.m_SideOnPilotActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_SideOnPilotActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public SideOnPilotActions @SideOnPilot => new SideOnPilotActions(this);

    // Menu
    private readonly InputActionMap m_Menu;
    private List<IMenuActions> m_MenuActionsCallbackInterfaces = new List<IMenuActions>();
    private readonly InputAction m_Menu_Newaction;
    public struct MenuActions
    {
        private @PlayerMapping m_Wrapper;
        public MenuActions(@PlayerMapping wrapper) { m_Wrapper = wrapper; }
        public InputAction @Newaction => m_Wrapper.m_Menu_Newaction;
        public InputActionMap Get() { return m_Wrapper.m_Menu; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MenuActions set) { return set.Get(); }
        public void AddCallbacks(IMenuActions instance)
        {
            if (instance == null || m_Wrapper.m_MenuActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MenuActionsCallbackInterfaces.Add(instance);
            @Newaction.started += instance.OnNewaction;
            @Newaction.performed += instance.OnNewaction;
            @Newaction.canceled += instance.OnNewaction;
        }

        private void UnregisterCallbacks(IMenuActions instance)
        {
            @Newaction.started -= instance.OnNewaction;
            @Newaction.performed -= instance.OnNewaction;
            @Newaction.canceled -= instance.OnNewaction;
        }

        public void RemoveCallbacks(IMenuActions instance)
        {
            if (m_Wrapper.m_MenuActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMenuActions instance)
        {
            foreach (var item in m_Wrapper.m_MenuActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MenuActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MenuActions @Menu => new MenuActions(this);
    public interface ITopDownPilotActions
    {
        void OnYAxis(InputAction.CallbackContext context);
        void OnXAxis(InputAction.CallbackContext context);
        void OnWeaponSwitch(InputAction.CallbackContext context);
        void OnUse_Weapon(InputAction.CallbackContext context);
        void OnQuickStep(InputAction.CallbackContext context);
        void OnDash(InputAction.CallbackContext context);
    }
    public interface ISideOnPilotActions
    {
        void OnNewaction(InputAction.CallbackContext context);
    }
    public interface IMenuActions
    {
        void OnNewaction(InputAction.CallbackContext context);
    }
}
